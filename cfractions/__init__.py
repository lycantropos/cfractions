"""Python C API alternative to `fractions` module."""

from __future__ import annotations

from typing import TYPE_CHECKING

__version__ = '2.4.0'

if TYPE_CHECKING:
    import numbers as _numbers
    from fractions import Fraction as _Fraction
    from typing import Any as _Any, Union as _Union

    from typing_extensions import (
        Self as _Self,
        final as _final,
        overload as _overload,
    )

    _Rational = _Union[_Fraction, _numbers.Rational, int]

    @_final
    class Fraction:
        @property
        def numerator(self, /) -> int: ...

        @property
        def denominator(self, /) -> int: ...

        def as_integer_ratio(self, /) -> tuple[int, int]: ...

        def is_integer(self, /) -> bool: ...

        def limit_denominator(
            self, max_denominator: int = 10**6, /
        ) -> _Self: ...

        @_overload
        def __new__(
            cls, value: _Rational | _Self | float | str = ..., _: None = ..., /
        ) -> _Self: ...

        @_overload
        def __new__(cls, numerator: int, denominator: int, /) -> _Self: ...

        def __new__(
            cls,
            numerator: _Rational | _Self | float | str = 0,
            denominator: int | None = None,
            /,
        ) -> _Self: ...

        def __abs__(self, /) -> _Self: ...

        @_overload
        def __add__(self, other: _Rational | _Self, /) -> _Self: ...

        @_overload
        def __add__(self, other: float, /) -> float: ...

        @_overload
        def __add__(self, other: _Any, /) -> _Any: ...

        def __add__(self, other: _Any, /) -> _Any: ...

        def __ceil__(self, /) -> int: ...

        def __copy__(self, /) -> _Self: ...

        def __deepcopy__(
            self, memo: dict[str, _Any] | None = None, /
        ) -> _Self: ...

        @_overload
        def __divmod__(
            self, divisor: _Rational | _Self, /
        ) -> tuple[int, _Self]: ...

        @_overload
        def __divmod__(self, divisor: float, /) -> tuple[float, float]: ...

        @_overload
        def __divmod__(self, divisor: _Any, /) -> _Any: ...

        def __divmod__(self, divisor: _Any, /) -> _Any: ...

        @_overload
        def __eq__(self, other: _Rational | _Self | float, /) -> bool: ...

        @_overload
        def __eq__(self, other: _Any, /) -> _Any: ...

        def __eq__(self, other: _Any, /) -> _Any: ...

        def __float__(self, /) -> float: ...

        def __floor__(self, /) -> int: ...

        @_overload
        def __floordiv__(self, divisor: _Rational | _Self, /) -> int: ...

        @_overload
        def __floordiv__(self, divisor: float, /) -> float: ...

        @_overload
        def __floordiv__(self, divisor: _Any, /) -> _Any: ...

        def __floordiv__(self, divisor: _Any, /) -> _Any: ...

        @_overload
        def __ge__(self, other: _Rational | _Self, /) -> bool: ...

        @_overload
        def __ge__(self, other: float, /) -> bool: ...

        @_overload
        def __ge__(self, other: _Any, /) -> _Any: ...

        def __ge__(self, other: _Any, /) -> _Any: ...

        @_overload
        def __gt__(self, other: _Rational | _Self, /) -> bool: ...

        @_overload
        def __gt__(self, other: float, /) -> bool: ...

        @_overload
        def __gt__(self, other: _Any, /) -> _Any: ...

        def __gt__(self, other: _Any, /) -> _Any: ...

        def __hash__(self, /) -> int: ...

        def __int__(self, /) -> int: ...

        @_overload
        def __le__(self, other: _Rational | _Self, /) -> bool: ...

        @_overload
        def __le__(self, other: float, /) -> bool: ...

        @_overload
        def __le__(self, other: _Any, /) -> _Any: ...

        def __le__(self, other: _Any, /) -> _Any: ...

        @_overload
        def __lt__(self, other: _Rational | _Self, /) -> bool: ...

        @_overload
        def __lt__(self, other: float, /) -> bool: ...

        @_overload
        def __lt__(self, other: _Any, /) -> _Any: ...

        def __lt__(self, other: _Any, /) -> _Any: ...

        @_overload
        def __mod__(self, divisor: _Rational | _Self, /) -> _Self: ...

        @_overload
        def __mod__(self, divisor: float, /) -> float: ...

        @_overload
        def __mod__(self, divisor: _Any, /) -> _Any: ...

        def __mod__(self, divisor: _Any, /) -> _Any: ...

        @_overload
        def __mul__(self, other: _Rational | _Self, /) -> _Self: ...

        @_overload
        def __mul__(self, other: float, /) -> float: ...

        @_overload
        def __mul__(self, other: _Any, /) -> _Any: ...

        def __mul__(self, other: _Any, /) -> _Any: ...

        def __neg__(self, /) -> _Self: ...

        def __pos__(self, /) -> _Self: ...

        @_overload
        def __pow__(self, exponent: int, /) -> _Self: ...

        @_overload
        def __pow__(self, exponent: _Rational | _Self, /) -> _Self | float: ...

        @_overload
        def __pow__(self, exponent: float, /) -> float: ...

        @_overload
        def __pow__(self, exponent: _Any, /) -> _Any: ...

        def __pow__(self, exponent: _Any, /) -> _Any: ...

        @_overload
        def __radd__(self, other: _Rational, /) -> _Self: ...

        @_overload
        def __radd__(self, other: float, /) -> float: ...

        @_overload
        def __radd__(self, other: _Any, /) -> _Any: ...

        def __radd__(self, other: _Any, /) -> _Any: ...

        @_overload
        def __rdivmod__(self, dividend: _Rational, /) -> tuple[int, _Self]: ...

        @_overload
        def __rdivmod__(self, dividend: float, /) -> tuple[float, float]: ...

        @_overload
        def __rdivmod__(self, dividend: _Any, /) -> _Any: ...

        def __rdivmod__(self, dividend: _Any, /) -> _Any: ...

        def __repr__(self) -> str: ...

        @_overload
        def __rfloordiv__(self, dividend: _Rational, /) -> int: ...

        @_overload
        def __rfloordiv__(self, dividend: float, /) -> float: ...

        @_overload
        def __rfloordiv__(self, dividend: _Any, /) -> _Any: ...

        def __rfloordiv__(self, dividend: _Any, /) -> _Any: ...

        @_overload
        def __rmod__(self, dividend: _Rational, /) -> _Self: ...

        @_overload
        def __rmod__(self, dividend: float, /) -> float: ...

        @_overload
        def __rmod__(self, dividend: _Any, /) -> _Any: ...

        def __rmod__(self, dividend: _Any, /) -> _Any: ...

        @_overload
        def __rmul__(self, other: _Rational, /) -> _Self: ...

        @_overload
        def __rmul__(self, other: float, /) -> float: ...

        @_overload
        def __rmul__(self, other: _Any, /) -> _Any: ...

        def __rmul__(self, other: _Any, /) -> _Any: ...

        @_overload
        def __round__(self, precision: None = ..., /) -> int: ...

        @_overload
        def __round__(self, precision: int, /) -> _Self: ...

        def __round__(
            self, precision: int | None = None, /
        ) -> int | _Self: ...

        @_overload
        def __rpow__(self, base: _Rational, /) -> _Self | float: ...

        @_overload
        def __rpow__(self, base: float, /) -> float: ...

        @_overload
        def __rpow__(self, base: _Any, /) -> _Any: ...

        def __rpow__(self, base: _Any, /) -> _Any: ...

        @_overload
        def __rsub__(self, minuend: _Rational, /) -> _Self: ...

        @_overload
        def __rsub__(self, minuend: float, /) -> float: ...

        @_overload
        def __rsub__(self, minuend: _Any, /) -> _Any: ...

        def __rsub__(self, minuend: _Any, /) -> _Any: ...

        @_overload
        def __rtruediv__(self, dividend: _Rational, /) -> _Self: ...

        @_overload
        def __rtruediv__(self, dividend: float, /) -> float: ...

        @_overload
        def __rtruediv__(self, dividend: _Any, /) -> _Any: ...

        def __rtruediv__(self, dividend: _Any, /) -> _Any: ...

        def __str__(self) -> str: ...

        @_overload
        def __sub__(self, subtrahend: _Rational | _Self, /) -> _Self: ...

        @_overload
        def __sub__(self, subtrahend: float, /) -> float: ...

        @_overload
        def __sub__(self, subtrahend: _Any, /) -> _Any: ...

        def __sub__(self, subtrahend: _Any, /) -> _Any: ...

        @_overload
        def __truediv__(self, divisor: _Rational | _Self, /) -> _Self: ...

        @_overload
        def __truediv__(self, divisor: float, /) -> float: ...

        @_overload
        def __truediv__(self, divisor: _Any, /) -> _Any: ...

        def __truediv__(self, divisor: _Any, /) -> _Any: ...

        def __trunc__(self, /) -> int: ...

else:
    try:
        from . import _cfractions
    except ImportError:
        from . import _fractions

        Fraction = _fractions.Fraction
    else:
        Fraction = _cfractions.Fraction
